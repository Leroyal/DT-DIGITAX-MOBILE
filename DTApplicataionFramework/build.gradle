plugins {
    id 'com.android.library'
    id 'org.jetbrains.dokka-android'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.google.gms.google-services'
}

group = 'com.digitaltaxusa.framework'

android {
    compileSdkVersion 30

    // construct version name
    def versionMajor = 1
    def versionMinor = 0
    def versionPatch = 0
    def code = 1
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode code
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        // test runner and consumer rules
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            buildConfigField "String", "FEATURES", "\"Device Utilities, Network Utilities, General Function Utilities, Room Database, Shared Prefs, Google Service APIs\""
            buildConfigField "boolean", "DEBUG_MODE", "true"
            buildConfigField "String", "VERSION_NAME", "\"${versionMajor}.${versionMinor}.${versionPatch}\""
            buildConfigField "String", "VERSION_CODE", "\"${code}\""
            manifestPlaceholders = [build_version: "${versionMajor}.${versionMinor}.${versionPatch}"]
            // debuggable
            debuggable true
        }
        release {
            buildConfigField "String", "FEATURES", "\"Device Utilities, Network Utilities, General Function Utilities, Room Database, Shared Prefs, Google Service APIs\""
            buildConfigField "boolean", "DEBUG_MODE", "false"
            buildConfigField "String", "VERSION_NAME", "\"${versionMajor}.${versionMinor}.${versionPatch}\""
            buildConfigField "String", "VERSION_CODE", "\"${code}\""
            manifestPlaceholders = [build_version: "${versionMajor}.${versionMinor}.${versionPatch}"]
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dokka {
        outputFormat = 'html'
        outputDirectory = "$projectDir/docs/kdoc"
    }

    lintOptions {
        // if true, stop the gradle build if errors are found
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // unit tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    def mockitoVersion = '3.10.0'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.5'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'

    // gson
    implementation 'com.google.code.gson:gson:2.8.7'

    // okHttp
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // support
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'com.google.firebase:firebase-analytics:19.0.0'
}
